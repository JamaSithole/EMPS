<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:com="*"
		  layout="vertical" width="100%" minWidth="400" height="100%" minHeight="300"
		  title="Upload Files" creationComplete="initCom()"
		  close="cancel()" >
	
	<mx:Metadata>
		[Event(name="uploadComplete", type="flash.events.Event")]
		[Event(name="uploadProgress", type="flash.events.ProgressEvent")]
		[Event(name="uploadCancel", type="flash.events.Event")]
		[Event(name="uploadIOError", type="flash.events.IOErrorEvent")]
		[Event(name="uploadSecurityError", type="flash.events.SecurityErrorEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import co.za.ngwane.epms.helper.EPMSSingleton;
			import co.za.ngwane.epms.helper.Helper;
			import co.za.ngwane.epms.repository.Attachepms;
			import co.za.ngwane.epms.repository.Qoupd;
			
			import flash.events.*;
			import flash.net.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.*;
			import mx.core.FlexGlobals;
			import mx.events.*;
			import mx.managers.*;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			private var _strUploadUrl:String;
			private var _refAddFiles:FileReferenceList;	
			private var _refUploadFile:FileReference;
			private var _arrUploadFiles:Array;
			private var _numCurrentUpload:Number = 0;			
			
			// Set uploadUrl
			public function set uploadUrl(strUploadUrl:String):void {
				_strUploadUrl = strUploadUrl;
			}
			
			// Initalize
			private function initCom():void {
				_arrUploadFiles = new Array();	
				EPMSSingleton.getInstance().filesList = new ArrayCollection;
				enableUI();
				uploadCheck();
				
				PopUpManager.centerPopUp(this);
			}
			
			// Called to add file(s) for upload
			private function addFiles():void {
				_refAddFiles = new FileReferenceList();
				_refAddFiles.addEventListener(Event.SELECT, onSelectFile);
				_refAddFiles.browse();
			}
			
			// Called when a file is selected
			private function onSelectFile(event:Event):void {
				var arrFoundList:Array = new Array();
				// Get list of files from fileList, make list of files already on upload list
				for (var i:Number = 0; i < _arrUploadFiles.length; i++) {
					for (var j:Number = 0; j < _refAddFiles.fileList.length; j++) {
						if (_arrUploadFiles[i].name == _refAddFiles.fileList[j].name) {
							arrFoundList.push(_refAddFiles.fileList[j].name);
							_refAddFiles.fileList.splice(j, 1);
							j--;
						}
					}
				}
				if (_refAddFiles.fileList.length >= 1) {				
					for (var k:Number = 0; k < _refAddFiles.fileList.length; k++) {		
						
						var fileRef : FileReference;
						fileRef = _refAddFiles.fileList[k];
						fileRef.addEventListener(Event.COMPLETE,onLoaded);
						fileRef.load();
						_arrUploadFiles.push({
							name:_refAddFiles.fileList[k].name,
							size:formatFileSize(_refAddFiles.fileList[k].size),
							file:fileRef});
					}
					listFilesDG.dataProvider = _arrUploadFiles;
					listFilesDG.selectedIndex = _arrUploadFiles.length - 1;
				}				
				if (arrFoundList.length >= 1) {
					Alert.show("The file(s): \n\n• " + arrFoundList.join("\n• ") + "\n\n...are already on the upload list. Please change the filename(s) or pick a different file.", "File(s) already on list");
				}
				updateProgBar();
				scrollFiles();
				uploadCheck();
			}
			
			private function onLoaded(event :Event):void{
				var att : Object = new Object();
				att.name = event.currentTarget.name;
				//Alert.show("Data = " + event.currentTarget.data);
			}
			
			// Called to format number to file size
			private function formatFileSize(numSize:Number):String {
				var strReturn:String;
				numSize = Number(numSize / 1000);
				strReturn = String(numSize.toFixed(1) + " KB");
				if (numSize > 1000) {
					numSize = numSize / 1000;
					strReturn = String(numSize.toFixed(1) + " MB");
					if (numSize > 1000) {
						numSize = numSize / 1000;
						strReturn = String(numSize.toFixed(1) + " GB");
					}
				}				
				return strReturn;
			}
			
			// Called to remove selected file(s) for upload
			private function removeFiles():void {
				var arrSelected:Array = listFilesDG.selectedIndices;
				if (arrSelected.length >= 1) {
					for (var i:Number = 0; i < arrSelected.length; i++) {
						_arrUploadFiles[Number(arrSelected[i])] = null;
					}
					for (var j:Number = 0; j < _arrUploadFiles.length; j++) {
						if (_arrUploadFiles[j] == null) {
							_arrUploadFiles.splice(j, 1);
							j--;
						}
					}
					listFilesDG.dataProvider = _arrUploadFiles;
					listFilesDG.selectedIndex = 0;					
				}
				updateProgBar();
				scrollFiles();
				uploadCheck();
			}
			
			// Called to check if there is at least one file to upload
			private function uploadCheck():void {
				if (_arrUploadFiles.length == 0) {
					btnUpload.enabled = false;
					listFilesDG.verticalScrollPolicy = "off";
				} else {
					btnUpload.enabled = true;
					listFilesDG.verticalScrollPolicy = "on";
				}
			}
			
			// Disable UI control
			private function disableUI():void {
				btnAdd.enabled = false;
				btnRemove.enabled = false;
				btnUpload.enabled = false;
				btnCancel.enabled = true;
				listFilesDG.enabled = false;
				listFilesDG.verticalScrollPolicy = "off";
			}
			
			// Enable UI control
			private function enableUI():void {
				btnAdd.enabled = true;
				btnRemove.enabled = true;
				btnUpload.enabled = true;
				btnCancel.enabled = false;
				listFilesDG.enabled = true;
				listFilesDG.verticalScrollPolicy = "on";
			}
			
			// Scroll listFilesDG to selected row
			private function scrollFiles():void {
				listFilesDG.verticalScrollPosition = listFilesDG.selectedIndex;
				listFilesDG.validateNow();
			}
			
			// Called to upload file based on current upload number
			private function startUpload():void {
				
				for (var k:Number = 0; k < _arrUploadFiles.length; k++) {		
					var att : Attachepms = new Attachepms;
					att.name = _arrUploadFiles[k].name;
					att.attachment = _arrUploadFiles[k].file.data;
					EPMSSingleton.getInstance().filesList.addItem(att);
				}
				doUploadFiles();
			}
			
			public function doUploadFiles():void
			{
				var remoteObject:mx.rpc.remoting.RemoteObject = new mx.rpc.remoting.RemoteObject();
				
				remoteObject.destination = "attachepmsOperations";
				remoteObject.uploadPoe(EPMSSingleton.getInstance().filesList, EPMSSingleton.getInstance().selectedQoupPoe);
				remoteObject.addEventListener(FaultEvent.FAULT, doUploadFilesFaultHandler);
				remoteObject.addEventListener(ResultEvent.RESULT, doUploadFilesResultHandler);
				cursorManager.setBusyCursor();
			}
			
			public function doUploadFilesResultHandler(event:ResultEvent):void
			{
				var result : Boolean = event.result as Boolean;
				if(result)
				{	
					Alert.show("File(s) uploaded successfully.","Successful", 4, null, null, Helper.accept);
					EPMSSingleton.getInstance().filesList = new ArrayCollection;
					EPMSSingleton.getInstance().selectedQoupPoe = new Qoupd;
					cancel();
				}
				else
				{
					Alert.show("Failed to upload file(s).","Error", 4, null, null, Helper.noEntryImg);
				}
				cursorManager.removeBusyCursor();
			}
			
			public static function doUploadFilesFaultHandler(event:FaultEvent):void 
			{
				//Alert.show( ObjectUtil.toString(event.fault) );
				Alert.show("Failed to upload files, please try again if this continues contact your administrator.","Failure", 4, null, null, Helper.noEntryImg);
			}
			
			// Cancel and clear eventlisteners on last upload
			private function clearUpload():void {
				_refUploadFile.removeEventListener(ProgressEvent.PROGRESS, onUploadProgress);
				_refUploadFile.removeEventListener(Event.COMPLETE, onUploadComplete);
				_refUploadFile.removeEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
				_refUploadFile.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
				_refUploadFile.cancel();
				_numCurrentUpload = 0;
				updateProgBar();
				enableUI();
			}
			
			// Called on upload cancel
			private function onUploadCanceled():void {
				clearUpload();
				dispatchEvent(new Event("uploadCancel"));
			}
			
			// Get upload progress
			private function onUploadProgress(event:ProgressEvent):void {
				var numPerc:Number = Math.round((event.bytesLoaded / event.bytesTotal) * 100);
				updateProgBar(numPerc);
				var evt:ProgressEvent = new ProgressEvent("uploadProgress", false, false, event.bytesLoaded, event.bytesTotal);
				dispatchEvent(evt);
			}
			
			// Update progBar
			private function updateProgBar(numPerc:Number = 0):void {
				var strLabel:String = (_numCurrentUpload + 1) + "/" + _arrUploadFiles.length;
				strLabel = (_numCurrentUpload + 1 <= _arrUploadFiles.length && numPerc > 0 && numPerc < 100) ? numPerc + "% - " + strLabel : strLabel;
				strLabel = (_numCurrentUpload + 1 == _arrUploadFiles.length && numPerc == 100) ? "Upload Complete - " + strLabel : strLabel;
				strLabel = (_arrUploadFiles.length == 0) ? "" : strLabel;
				progBar.label = strLabel;
				progBar.setProgress(numPerc, 100);
				progBar.validateNow();
			}
			
			// Called on upload complete
			private function onUploadComplete(event:Event):void {
				_numCurrentUpload++;				
				if (_numCurrentUpload < _arrUploadFiles.length) {
					startUpload();
				} else {
					enableUI();
					clearUpload();
					dispatchEvent(new Event("uploadComplete"));
				}
			}
			
			// Called on upload io error
			private function onUploadIoError(event:IOErrorEvent):void {
				clearUpload();
				var evt:IOErrorEvent = new IOErrorEvent("uploadIoError", false, false, event.text);
				dispatchEvent(evt);
			}
			
			// Called on upload security error
			private function onUploadSecurityError(event:SecurityErrorEvent):void {
				clearUpload();
				var evt:SecurityErrorEvent = new SecurityErrorEvent("uploadSecurityError", false, false, event.text);
				dispatchEvent(evt);
			}
			
			// Change view state
			private function changeView():void {
				currentState = (currentState == "mini") ? "" : "mini";
			}
			
			private function cancel() : void
			{
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="mini">
			<mx:SetProperty name="height" value="60"/>
			<mx:SetProperty name="minHeight" value="60"/>
			<mx:SetStyle target="{btnView}" name="icon" value="@Embed('assets/application_put.png')"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{this}" duration="1000"/>
		</mx:Transition>
	</mx:transitions>
	
	<mx:HBox width="100%" >
		<mx:Canvas width="100%"/>
		<mx:Image source="@Embed('images/BtnCancel.png')" click="cancel()"/>
	</mx:HBox>
	
	<mx:Canvas width="100%" height="100%">
		<mx:DataGrid id="listFilesDG" left="0" top="0" bottom="0" right="0"
					 allowMultipleSelection="true" verticalScrollPolicy="on"
					 draggableColumns="true" resizableColumns="true" sortableColumns="true">
			<mx:columns>
				<mx:DataGridColumn headerText="File" dataField="name" wordWrap="true"/>
				<mx:DataGridColumn headerText="Size" dataField="size" width="75" textAlign="right"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
	
	<mx:ControlBar horizontalAlign="center" verticalAlign="middle">
		<mx:Button id="btnAdd" toolTip="Add file(s)" click="addFiles()" icon="@Embed('assets/add.png')" width="26"/>
		<mx:Button id="btnRemove" toolTip="Remove file(s)" click="removeFiles()" icon="@Embed('assets/delete.png')" width="26"/>
		<mx:ProgressBar id="progBar" mode="manual" label="" labelPlacement="center" width="100%"/>
		<mx:Button id="btnCancel" toolTip="Cancel upload" icon="@Embed('assets/cancel2.png')" width="26" click="onUploadCanceled()"/>
		<mx:Button label="Upload" toolTip="Upload file(s)" id="btnUpload" click="startUpload()" icon="@Embed('assets/bullet_go.png')"/>
		<mx:Button id="btnView" toolTip="Show/Hide file(s)" icon="@Embed('assets/application_get.png')" width="26" click="changeView()"/>
	</mx:ControlBar>	
	
</mx:TitleWindow>